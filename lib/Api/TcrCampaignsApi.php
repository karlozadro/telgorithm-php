<?php
/**
 * TcrCampaignsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telgorithm Messaging API
 *
 * In our APIs we use a rate limit. The rate limit is the maximum number of calls you want to allow in a particular time interval. Setting rate limits helps us to provide the best performance of integration between your software and Telgorithm by preventing other clients from affecting you.    Despite the fact that there is no accepted standard for HTTP rate-limiting headers, we were guided by [**IETF draft: RateLimit Fields for HTTP**](https://www.ietf.org/archive/id/draft-ietf-httpapi-ratelimit-headers-05.html).      We use these HTTP headers on APIs endpoints:    ``` RateLimit-Limit: containing the requests quota in the time window; RateLimit-Remaining: containing a non-negative integer which represents the remaining requests quota in the current time window; RateLimit-Reset: amount of seconds when the full quota will be available; ```  Default quotas:  | Endpoint                             | Default            | | ------------------------------------ | ------------------ | | POST `messaging/v1/OutboundMessages` | 100 per 10 seconds       | | POST `messaging/v1/Phones`           | 120 per hour        | | All REST GET endpoints               | 100 per 10 seconds | | REST non-GET endpoints               | 100 per 10 seconds  |  When quota is exceeded, server do not serve the request replying instead with a 429 HTTP status code.    If you need a bigger quota [contact us](mailto:support@telgorithm.com).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TcrCampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TcrCampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1TcrCampaignsGet' => [
            'application/json',
        ],
        'v1TcrCampaignsPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1TcrCampaignsTcrCampaignIdDelete' => [
            'application/json',
        ],
        'v1TcrCampaignsTcrCampaignIdGet' => [
            'application/json',
        ],
        'v1TcrCampaignsTcrCampaignIdPatch' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1TcrCampaignsTcrCampaignIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1TcrCampaignsGet
     *
     * Get all TCR Campaigns.
     *
     * @param  string $tcr_brand_sid TCR Brand ID. (optional)
     * @param  int $page_size page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction order_by_direction (optional)
     * @param  string $search_id search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CampaignModelPaginatedResult|\OpenAPI\Client\Model\ValidationProblemDetails
     */
    public function v1TcrCampaignsGet($tcr_brand_sid = null, $page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1TcrCampaignsGet'][0])
    {
        list($response) = $this->v1TcrCampaignsGetWithHttpInfo($tcr_brand_sid, $page_size, $order_by_direction, $search_id, $contentType);
        return $response;
    }

    /**
     * Operation v1TcrCampaignsGetWithHttpInfo
     *
     * Get all TCR Campaigns.
     *
     * @param  string $tcr_brand_sid TCR Brand ID. (optional)
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CampaignModelPaginatedResult|\OpenAPI\Client\Model\ValidationProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1TcrCampaignsGetWithHttpInfo($tcr_brand_sid = null, $page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1TcrCampaignsGet'][0])
    {
        $request = $this->v1TcrCampaignsGetRequest($tcr_brand_sid, $page_size, $order_by_direction, $search_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CampaignModelPaginatedResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CampaignModelPaginatedResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CampaignModelPaginatedResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CampaignModelPaginatedResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CampaignModelPaginatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsGetAsync
     *
     * Get all TCR Campaigns.
     *
     * @param  string $tcr_brand_sid TCR Brand ID. (optional)
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsGetAsync($tcr_brand_sid = null, $page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1TcrCampaignsGet'][0])
    {
        return $this->v1TcrCampaignsGetAsyncWithHttpInfo($tcr_brand_sid, $page_size, $order_by_direction, $search_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsGetAsyncWithHttpInfo
     *
     * Get all TCR Campaigns.
     *
     * @param  string $tcr_brand_sid TCR Brand ID. (optional)
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsGetAsyncWithHttpInfo($tcr_brand_sid = null, $page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1TcrCampaignsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CampaignModelPaginatedResult';
        $request = $this->v1TcrCampaignsGetRequest($tcr_brand_sid, $page_size, $order_by_direction, $search_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsGet'
     *
     * @param  string $tcr_brand_sid TCR Brand ID. (optional)
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1TcrCampaignsGetRequest($tcr_brand_sid = null, $page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1TcrCampaignsGet'][0])
    {


        if ($page_size !== null && $page_size > 10000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling TcrCampaignsApi.v1TcrCampaignsGet, must be smaller than or equal to 10000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling TcrCampaignsApi.v1TcrCampaignsGet, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v1/TcrCampaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tcr_brand_sid,
            'TcrBrandSid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'PageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_direction,
            'OrderByDirection', // param base name
            'OrderByDirections', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'SearchId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TcrCampaignsPost
     *
     * Import a TCR Campaign.
     *
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsPostRequest $v1_tcr_campaigns_post_request v1_tcr_campaigns_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails
     * @deprecated
     */
    public function v1TcrCampaignsPost($v1_tcr_campaigns_post_request = null, string $contentType = self::contentTypes['v1TcrCampaignsPost'][0])
    {
        list($response) = $this->v1TcrCampaignsPostWithHttpInfo($v1_tcr_campaigns_post_request, $contentType);
        return $response;
    }

    /**
     * Operation v1TcrCampaignsPostWithHttpInfo
     *
     * Import a TCR Campaign.
     *
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsPostRequest $v1_tcr_campaigns_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function v1TcrCampaignsPostWithHttpInfo($v1_tcr_campaigns_post_request = null, string $contentType = self::contentTypes['v1TcrCampaignsPost'][0])
    {
        $request = $this->v1TcrCampaignsPostRequest($v1_tcr_campaigns_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CampaignModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CampaignModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CampaignModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CampaignModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CampaignModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsPostAsync
     *
     * Import a TCR Campaign.
     *
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsPostRequest $v1_tcr_campaigns_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1TcrCampaignsPostAsync($v1_tcr_campaigns_post_request = null, string $contentType = self::contentTypes['v1TcrCampaignsPost'][0])
    {
        return $this->v1TcrCampaignsPostAsyncWithHttpInfo($v1_tcr_campaigns_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsPostAsyncWithHttpInfo
     *
     * Import a TCR Campaign.
     *
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsPostRequest $v1_tcr_campaigns_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1TcrCampaignsPostAsyncWithHttpInfo($v1_tcr_campaigns_post_request = null, string $contentType = self::contentTypes['v1TcrCampaignsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CampaignModel';
        $request = $this->v1TcrCampaignsPostRequest($v1_tcr_campaigns_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsPost'
     *
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsPostRequest $v1_tcr_campaigns_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function v1TcrCampaignsPostRequest($v1_tcr_campaigns_post_request = null, string $contentType = self::contentTypes['v1TcrCampaignsPost'][0])
    {



        $resourcePath = '/v1/TcrCampaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_tcr_campaigns_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_tcr_campaigns_post_request));
            } else {
                $httpBody = $v1_tcr_campaigns_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdDelete
     *
     * Delete Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function v1TcrCampaignsTcrCampaignIdDelete($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'][0])
    {
        $this->v1TcrCampaignsTcrCampaignIdDeleteWithHttpInfo($tcr_campaign_id, $contentType);
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdDeleteWithHttpInfo
     *
     * Delete Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function v1TcrCampaignsTcrCampaignIdDeleteWithHttpInfo($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'][0])
    {
        $request = $this->v1TcrCampaignsTcrCampaignIdDeleteRequest($tcr_campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdDeleteAsync
     *
     * Delete Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1TcrCampaignsTcrCampaignIdDeleteAsync($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'][0])
    {
        return $this->v1TcrCampaignsTcrCampaignIdDeleteAsyncWithHttpInfo($tcr_campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdDeleteAsyncWithHttpInfo
     *
     * Delete Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function v1TcrCampaignsTcrCampaignIdDeleteAsyncWithHttpInfo($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1TcrCampaignsTcrCampaignIdDeleteRequest($tcr_campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsTcrCampaignIdDelete'
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function v1TcrCampaignsTcrCampaignIdDeleteRequest($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdDelete'][0])
    {

        // verify the required parameter 'tcr_campaign_id' is set
        if ($tcr_campaign_id === null || (is_array($tcr_campaign_id) && count($tcr_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tcr_campaign_id when calling v1TcrCampaignsTcrCampaignIdDelete'
            );
        }


        $resourcePath = '/v1/TcrCampaigns/{tcrCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tcr_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcrCampaignId' . '}',
                ObjectSerializer::toPathValue($tcr_campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdGet
     *
     * Get a TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1TcrCampaignsTcrCampaignIdGet($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'][0])
    {
        list($response) = $this->v1TcrCampaignsTcrCampaignIdGetWithHttpInfo($tcr_campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdGetWithHttpInfo
     *
     * Get a TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1TcrCampaignsTcrCampaignIdGetWithHttpInfo($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'][0])
    {
        $request = $this->v1TcrCampaignsTcrCampaignIdGetRequest($tcr_campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CampaignModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CampaignModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CampaignModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CampaignModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CampaignModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdGetAsync
     *
     * Get a TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdGetAsync($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'][0])
    {
        return $this->v1TcrCampaignsTcrCampaignIdGetAsyncWithHttpInfo($tcr_campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdGetAsyncWithHttpInfo
     *
     * Get a TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdGetAsyncWithHttpInfo($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CampaignModel';
        $request = $this->v1TcrCampaignsTcrCampaignIdGetRequest($tcr_campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsTcrCampaignIdGet'
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1TcrCampaignsTcrCampaignIdGetRequest($tcr_campaign_id, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdGet'][0])
    {

        // verify the required parameter 'tcr_campaign_id' is set
        if ($tcr_campaign_id === null || (is_array($tcr_campaign_id) && count($tcr_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tcr_campaign_id when calling v1TcrCampaignsTcrCampaignIdGet'
            );
        }


        $resourcePath = '/v1/TcrCampaigns/{tcrCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tcr_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcrCampaignId' . '}',
                ObjectSerializer::toPathValue($tcr_campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPatch
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPatchRequest $v1_tcr_campaigns_tcr_campaign_id_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1TcrCampaignsTcrCampaignIdPatch($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'][0])
    {
        list($response) = $this->v1TcrCampaignsTcrCampaignIdPatchWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request, $contentType);
        return $response;
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPatchWithHttpInfo
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPatchRequest $v1_tcr_campaigns_tcr_campaign_id_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1TcrCampaignsTcrCampaignIdPatchWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'][0])
    {
        $request = $this->v1TcrCampaignsTcrCampaignIdPatchRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CampaignModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CampaignModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CampaignModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CampaignModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CampaignModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPatchAsync
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPatchRequest $v1_tcr_campaigns_tcr_campaign_id_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdPatchAsync($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'][0])
    {
        return $this->v1TcrCampaignsTcrCampaignIdPatchAsyncWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPatchAsyncWithHttpInfo
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPatchRequest $v1_tcr_campaigns_tcr_campaign_id_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdPatchAsyncWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CampaignModel';
        $request = $this->v1TcrCampaignsTcrCampaignIdPatchRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsTcrCampaignIdPatch'
     *
     * @param  string $tcr_campaign_id TCR Campaign ID. (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPatchRequest $v1_tcr_campaigns_tcr_campaign_id_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1TcrCampaignsTcrCampaignIdPatchRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_patch_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPatch'][0])
    {

        // verify the required parameter 'tcr_campaign_id' is set
        if ($tcr_campaign_id === null || (is_array($tcr_campaign_id) && count($tcr_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tcr_campaign_id when calling v1TcrCampaignsTcrCampaignIdPatch'
            );
        }



        $resourcePath = '/v1/TcrCampaigns/{tcrCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tcr_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcrCampaignId' . '}',
                ObjectSerializer::toPathValue($tcr_campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_tcr_campaigns_tcr_campaign_id_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_tcr_campaigns_tcr_campaign_id_patch_request));
            } else {
                $httpBody = $v1_tcr_campaigns_tcr_campaign_id_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPut
     *
     * Update all values in the TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPutRequest $v1_tcr_campaigns_tcr_campaign_id_put_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1TcrCampaignsTcrCampaignIdPut($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'][0])
    {
        list($response) = $this->v1TcrCampaignsTcrCampaignIdPutWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request, $contentType);
        return $response;
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPutWithHttpInfo
     *
     * Update all values in the TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPutRequest $v1_tcr_campaigns_tcr_campaign_id_put_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CampaignModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1TcrCampaignsTcrCampaignIdPutWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'][0])
    {
        $request = $this->v1TcrCampaignsTcrCampaignIdPutRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CampaignModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CampaignModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CampaignModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CampaignModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CampaignModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPutAsync
     *
     * Update all values in the TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPutRequest $v1_tcr_campaigns_tcr_campaign_id_put_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdPutAsync($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'][0])
    {
        return $this->v1TcrCampaignsTcrCampaignIdPutAsyncWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1TcrCampaignsTcrCampaignIdPutAsyncWithHttpInfo
     *
     * Update all values in the TCR Campaign.
     *
     * @param  string $tcr_campaign_id TCR Campaign ID (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPutRequest $v1_tcr_campaigns_tcr_campaign_id_put_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1TcrCampaignsTcrCampaignIdPutAsyncWithHttpInfo($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CampaignModel';
        $request = $this->v1TcrCampaignsTcrCampaignIdPutRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1TcrCampaignsTcrCampaignIdPut'
     *
     * @param  string $tcr_campaign_id TCR Campaign ID (required)
     * @param  \OpenAPI\Client\Model\V1TcrCampaignsTcrCampaignIdPutRequest $v1_tcr_campaigns_tcr_campaign_id_put_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1TcrCampaignsTcrCampaignIdPutRequest($tcr_campaign_id, $v1_tcr_campaigns_tcr_campaign_id_put_request = null, string $contentType = self::contentTypes['v1TcrCampaignsTcrCampaignIdPut'][0])
    {

        // verify the required parameter 'tcr_campaign_id' is set
        if ($tcr_campaign_id === null || (is_array($tcr_campaign_id) && count($tcr_campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tcr_campaign_id when calling v1TcrCampaignsTcrCampaignIdPut'
            );
        }



        $resourcePath = '/v1/TcrCampaigns/{tcrCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tcr_campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcrCampaignId' . '}',
                ObjectSerializer::toPathValue($tcr_campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_tcr_campaigns_tcr_campaign_id_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_tcr_campaigns_tcr_campaign_id_put_request));
            } else {
                $httpBody = $v1_tcr_campaigns_tcr_campaign_id_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
