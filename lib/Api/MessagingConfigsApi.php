<?php
/**
 * MessagingConfigsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telgorithm Messaging API
 *
 * In our APIs we use a rate limit. The rate limit is the maximum number of calls you want to allow in a particular time interval. Setting rate limits helps us to provide the best performance of integration between your software and Telgorithm by preventing other clients from affecting you.    Despite the fact that there is no accepted standard for HTTP rate-limiting headers, we were guided by [**IETF draft: RateLimit Fields for HTTP**](https://www.ietf.org/archive/id/draft-ietf-httpapi-ratelimit-headers-05.html).      We use these HTTP headers on APIs endpoints:    ``` RateLimit-Limit: containing the requests quota in the time window; RateLimit-Remaining: containing a non-negative integer which represents the remaining requests quota in the current time window; RateLimit-Reset: amount of seconds when the full quota will be available; ```  Default quotas:  | Endpoint                             | Default            | | ------------------------------------ | ------------------ | | POST `messaging/v1/OutboundMessages` | 100 per 10 seconds       | | POST `messaging/v1/Phones`           | 120 per hour        | | All REST GET endpoints               | 100 per 10 seconds | | REST non-GET endpoints               | 100 per 10 seconds  |  When quota is exceeded, server do not serve the request replying instead with a 429 HTTP status code.    If you need a bigger quota [contact us](mailto:support@telgorithm.com).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessagingConfigsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessagingConfigsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1MessagingConfigsGet' => [
            'application/json',
        ],
        'v1MessagingConfigsPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1MessagingConfigsSidAddPhonesPatch' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1MessagingConfigsSidDelete' => [
            'application/json',
        ],
        'v1MessagingConfigsSidDeletePhonesPatch' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1MessagingConfigsSidGet' => [
            'application/json',
        ],
        'v1MessagingConfigsSidPatch' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'v1MessagingConfigsSidPhonesGet' => [
            'application/json',
        ],
        'v1MessagingConfigsSidPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1MessagingConfigsGet
     *
     * Get all Messaging Configs.
     *
     * @param  int $page_size page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction order_by_direction (optional)
     * @param  string $search_id search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigModelPaginatedResult|\OpenAPI\Client\Model\ValidationProblemDetails
     */
    public function v1MessagingConfigsGet($page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1MessagingConfigsGet'][0])
    {
        list($response) = $this->v1MessagingConfigsGetWithHttpInfo($page_size, $order_by_direction, $search_id, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsGetWithHttpInfo
     *
     * Get all Messaging Configs.
     *
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigModelPaginatedResult|\OpenAPI\Client\Model\ValidationProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsGetWithHttpInfo($page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1MessagingConfigsGet'][0])
    {
        $request = $this->v1MessagingConfigsGetRequest($page_size, $order_by_direction, $search_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsGetAsync
     *
     * Get all Messaging Configs.
     *
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsGetAsync($page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1MessagingConfigsGet'][0])
    {
        return $this->v1MessagingConfigsGetAsyncWithHttpInfo($page_size, $order_by_direction, $search_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsGetAsyncWithHttpInfo
     *
     * Get all Messaging Configs.
     *
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsGetAsyncWithHttpInfo($page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1MessagingConfigsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigModelPaginatedResult';
        $request = $this->v1MessagingConfigsGetRequest($page_size, $order_by_direction, $search_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsGet'
     *
     * @param  int $page_size (optional)
     * @param  \OpenAPI\Client\Model\OrderByDirections $order_by_direction (optional)
     * @param  string $search_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsGetRequest($page_size = null, $order_by_direction = null, $search_id = null, string $contentType = self::contentTypes['v1MessagingConfigsGet'][0])
    {

        if ($page_size !== null && $page_size > 10000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MessagingConfigsApi.v1MessagingConfigsGet, must be smaller than or equal to 10000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling MessagingConfigsApi.v1MessagingConfigsGet, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/v1/MessagingConfigs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'PageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by_direction,
            'OrderByDirection', // param base name
            'OrderByDirections', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'SearchId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsPost
     *
     * Add a Messaging Config.
     *
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request v1_messaging_configs_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails
     */
    public function v1MessagingConfigsPost($v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsPost'][0])
    {
        list($response) = $this->v1MessagingConfigsPostWithHttpInfo($v1_messaging_configs_post_request, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsPostWithHttpInfo
     *
     * Add a Messaging Config.
     *
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsPostWithHttpInfo($v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsPost'][0])
    {
        $request = $this->v1MessagingConfigsPostRequest($v1_messaging_configs_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\MessagingConfigModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsPostAsync
     *
     * Add a Messaging Config.
     *
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsPostAsync($v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsPost'][0])
    {
        return $this->v1MessagingConfigsPostAsyncWithHttpInfo($v1_messaging_configs_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsPostAsyncWithHttpInfo
     *
     * Add a Messaging Config.
     *
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsPostAsyncWithHttpInfo($v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
        $request = $this->v1MessagingConfigsPostRequest($v1_messaging_configs_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsPost'
     *
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsPostRequest($v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsPost'][0])
    {



        $resourcePath = '/v1/MessagingConfigs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_messaging_configs_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_messaging_configs_post_request));
            } else {
                $httpBody = $v1_messaging_configs_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidAddPhonesPatch
     *
     * Add phone numbers to the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneNumberBulkResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidAddPhonesPatch($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'][0])
    {
        list($response) = $this->v1MessagingConfigsSidAddPhonesPatchWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidAddPhonesPatchWithHttpInfo
     *
     * Add phone numbers to the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneNumberBulkResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidAddPhonesPatchWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'][0])
    {
        $request = $this->v1MessagingConfigsSidAddPhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneNumberBulkResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneNumberBulkResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneNumberBulkResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneNumberBulkResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneNumberBulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidAddPhonesPatchAsync
     *
     * Add phone numbers to the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidAddPhonesPatchAsync($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'][0])
    {
        return $this->v1MessagingConfigsSidAddPhonesPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidAddPhonesPatchAsyncWithHttpInfo
     *
     * Add phone numbers to the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidAddPhonesPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneNumberBulkResult';
        $request = $this->v1MessagingConfigsSidAddPhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidAddPhonesPatch'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidAddPhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidAddPhonesPatch'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidAddPhonesPatch'
            );
        }



        $resourcePath = '/v1/MessagingConfigs/{sid}/addPhones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_messaging_configs_sid_add_phones_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_messaging_configs_sid_add_phones_patch_request));
            } else {
                $httpBody = $v1_messaging_configs_sid_add_phones_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidDelete
     *
     * Delete a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1MessagingConfigsSidDelete($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidDelete'][0])
    {
        $this->v1MessagingConfigsSidDeleteWithHttpInfo($sid, $contentType);
    }

    /**
     * Operation v1MessagingConfigsSidDeleteWithHttpInfo
     *
     * Delete a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidDeleteWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidDelete'][0])
    {
        $request = $this->v1MessagingConfigsSidDeleteRequest($sid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidDeleteAsync
     *
     * Delete a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidDeleteAsync($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidDelete'][0])
    {
        return $this->v1MessagingConfigsSidDeleteAsyncWithHttpInfo($sid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidDeleteAsyncWithHttpInfo
     *
     * Delete a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidDeleteAsyncWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidDelete'][0])
    {
        $returnType = '';
        $request = $this->v1MessagingConfigsSidDeleteRequest($sid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidDelete'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidDeleteRequest($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidDelete'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidDelete'
            );
        }


        $resourcePath = '/v1/MessagingConfigs/{sid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidDeletePhonesPatch
     *
     * Delete phone numbers from the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneNumberBulkResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidDeletePhonesPatch($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'][0])
    {
        list($response) = $this->v1MessagingConfigsSidDeletePhonesPatchWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidDeletePhonesPatchWithHttpInfo
     *
     * Delete phone numbers from the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneNumberBulkResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidDeletePhonesPatchWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'][0])
    {
        $request = $this->v1MessagingConfigsSidDeletePhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneNumberBulkResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneNumberBulkResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneNumberBulkResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneNumberBulkResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneNumberBulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidDeletePhonesPatchAsync
     *
     * Delete phone numbers from the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidDeletePhonesPatchAsync($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'][0])
    {
        return $this->v1MessagingConfigsSidDeletePhonesPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidDeletePhonesPatchAsyncWithHttpInfo
     *
     * Delete phone numbers from the Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidDeletePhonesPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneNumberBulkResult';
        $request = $this->v1MessagingConfigsSidDeletePhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidDeletePhonesPatch'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidAddPhonesPatchRequest $v1_messaging_configs_sid_add_phones_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidDeletePhonesPatchRequest($sid, $v1_messaging_configs_sid_add_phones_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidDeletePhonesPatch'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidDeletePhonesPatch'
            );
        }



        $resourcePath = '/v1/MessagingConfigs/{sid}/deletePhones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_messaging_configs_sid_add_phones_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_messaging_configs_sid_add_phones_patch_request));
            } else {
                $httpBody = $v1_messaging_configs_sid_add_phones_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidGet
     *
     * Get a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidGet($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidGet'][0])
    {
        list($response) = $this->v1MessagingConfigsSidGetWithHttpInfo($sid, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidGetWithHttpInfo
     *
     * Get a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidGetWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidGet'][0])
    {
        $request = $this->v1MessagingConfigsSidGetRequest($sid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessagingConfigModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidGetAsync
     *
     * Get a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidGetAsync($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidGet'][0])
    {
        return $this->v1MessagingConfigsSidGetAsyncWithHttpInfo($sid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidGetAsyncWithHttpInfo
     *
     * Get a Messaging Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidGetAsyncWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
        $request = $this->v1MessagingConfigsSidGetRequest($sid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidGet'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidGetRequest($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidGet'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidGet'
            );
        }


        $resourcePath = '/v1/MessagingConfigs/{sid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidPatch
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidPatchRequest $v1_messaging_configs_sid_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidPatch($sid, $v1_messaging_configs_sid_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPatch'][0])
    {
        list($response) = $this->v1MessagingConfigsSidPatchWithHttpInfo($sid, $v1_messaging_configs_sid_patch_request, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidPatchWithHttpInfo
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidPatchRequest $v1_messaging_configs_sid_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidPatchWithHttpInfo($sid, $v1_messaging_configs_sid_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPatch'][0])
    {
        $request = $this->v1MessagingConfigsSidPatchRequest($sid, $v1_messaging_configs_sid_patch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessagingConfigModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidPatchAsync
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidPatchRequest $v1_messaging_configs_sid_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPatchAsync($sid, $v1_messaging_configs_sid_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPatch'][0])
    {
        return $this->v1MessagingConfigsSidPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_patch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidPatchAsyncWithHttpInfo
     *
     * Update only values that is passed in request and do not touch others.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidPatchRequest $v1_messaging_configs_sid_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPatchAsyncWithHttpInfo($sid, $v1_messaging_configs_sid_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
        $request = $this->v1MessagingConfigsSidPatchRequest($sid, $v1_messaging_configs_sid_patch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidPatch'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsSidPatchRequest $v1_messaging_configs_sid_patch_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidPatchRequest($sid, $v1_messaging_configs_sid_patch_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPatch'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidPatch'
            );
        }



        $resourcePath = '/v1/MessagingConfigs/{sid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_messaging_configs_sid_patch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_messaging_configs_sid_patch_request));
            } else {
                $httpBody = $v1_messaging_configs_sid_patch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidPhonesGet
     *
     * Get Messaging Config phone numbers.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPhonesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigPhonesResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidPhonesGet($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidPhonesGet'][0])
    {
        list($response) = $this->v1MessagingConfigsSidPhonesGetWithHttpInfo($sid, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidPhonesGetWithHttpInfo
     *
     * Get Messaging Config phone numbers.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPhonesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigPhonesResult|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidPhonesGetWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidPhonesGet'][0])
    {
        $request = $this->v1MessagingConfigsSidPhonesGetRequest($sid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessagingConfigPhonesResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigPhonesResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigPhonesResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigPhonesResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigPhonesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidPhonesGetAsync
     *
     * Get Messaging Config phone numbers.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPhonesGetAsync($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidPhonesGet'][0])
    {
        return $this->v1MessagingConfigsSidPhonesGetAsyncWithHttpInfo($sid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidPhonesGetAsyncWithHttpInfo
     *
     * Get Messaging Config phone numbers.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPhonesGetAsyncWithHttpInfo($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidPhonesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigPhonesResult';
        $request = $this->v1MessagingConfigsSidPhonesGetRequest($sid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidPhonesGet'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidPhonesGetRequest($sid, string $contentType = self::contentTypes['v1MessagingConfigsSidPhonesGet'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidPhonesGet'
            );
        }


        $resourcePath = '/v1/MessagingConfigs/{sid}/phones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MessagingConfigsSidPut
     *
     * Update all values in the Message Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function v1MessagingConfigsSidPut($sid, $v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPut'][0])
    {
        list($response) = $this->v1MessagingConfigsSidPutWithHttpInfo($sid, $v1_messaging_configs_post_request, $contentType);
        return $response;
    }

    /**
     * Operation v1MessagingConfigsSidPutWithHttpInfo
     *
     * Update all values in the Message Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessagingConfigModel|\OpenAPI\Client\Model\ValidationProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MessagingConfigsSidPutWithHttpInfo($sid, $v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPut'][0])
    {
        $request = $this->v1MessagingConfigsSidPutRequest($sid, $v1_messaging_configs_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessagingConfigModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessagingConfigModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessagingConfigModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ValidationProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProblemDetails' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessagingConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MessagingConfigsSidPutAsync
     *
     * Update all values in the Message Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPutAsync($sid, $v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPut'][0])
    {
        return $this->v1MessagingConfigsSidPutAsyncWithHttpInfo($sid, $v1_messaging_configs_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MessagingConfigsSidPutAsyncWithHttpInfo
     *
     * Update all values in the Message Config.
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MessagingConfigsSidPutAsyncWithHttpInfo($sid, $v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessagingConfigModel';
        $request = $this->v1MessagingConfigsSidPutRequest($sid, $v1_messaging_configs_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MessagingConfigsSidPut'
     *
     * @param  string $sid Messaging Config Sid. (required)
     * @param  \OpenAPI\Client\Model\V1MessagingConfigsPostRequest $v1_messaging_configs_post_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MessagingConfigsSidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MessagingConfigsSidPutRequest($sid, $v1_messaging_configs_post_request = null, string $contentType = self::contentTypes['v1MessagingConfigsSidPut'][0])
    {

        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling v1MessagingConfigsSidPut'
            );
        }



        $resourcePath = '/v1/MessagingConfigs/{sid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sid !== null) {
            $resourcePath = str_replace(
                '{' . 'sid' . '}',
                ObjectSerializer::toPathValue($sid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v1_messaging_configs_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v1_messaging_configs_post_request));
            } else {
                $httpBody = $v1_messaging_configs_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
