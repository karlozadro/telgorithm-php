<?php
/**
 * CallLegModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telgorithm Messaging API
 *
 * In our APIs we use a rate limit. The rate limit is the maximum number of calls you want to allow in a particular time interval. Setting rate limits helps us to provide the best performance of integration between your software and Telgorithm by preventing other clients from affecting you.    Despite the fact that there is no accepted standard for HTTP rate-limiting headers, we were guided by [**IETF draft: RateLimit Fields for HTTP**](https://www.ietf.org/archive/id/draft-ietf-httpapi-ratelimit-headers-05.html).      We use these HTTP headers on APIs endpoints:    ``` RateLimit-Limit: containing the requests quota in the time window; RateLimit-Remaining: containing a non-negative integer which represents the remaining requests quota in the current time window; RateLimit-Reset: amount of seconds when the full quota will be available; ```  Default quotas:  | Endpoint                             | Default            | | ------------------------------------ | ------------------ | | POST `messaging/v1/OutboundMessages` | 100 per 10 seconds       | | POST `messaging/v1/Phones`           | 120 per hour        | | All REST GET endpoints               | 100 per 10 seconds | | REST non-GET endpoints               | 100 per 10 seconds  |  When quota is exceeded, server do not serve the request replying instead with a 429 HTTP status code.    If you need a bigger quota [contact us](mailto:support@telgorithm.com).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CallLegModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CallLegModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CallLegModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'leg_sid' => 'string',
        'call_sid' => 'string',
        'from' => 'string',
        'to' => 'string',
        'status' => '\OpenAPI\Client\Model\CallStatus',
        'call_direction' => '\OpenAPI\Client\Model\CallDirection',
        'leg_direction' => '\OpenAPI\Client\Model\CallDirection',
        'duration' => 'string',
        'created_on' => '\DateTime',
        'started_on' => '\DateTime',
        'rang_on' => '\DateTime',
        'answered_on' => '\DateTime',
        'completed_on' => '\DateTime',
        'fees' => '\OpenAPI\Client\Model\FeeGroupModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'leg_sid' => null,
        'call_sid' => null,
        'from' => null,
        'to' => null,
        'status' => null,
        'call_direction' => null,
        'leg_direction' => null,
        'duration' => 'date-span',
        'created_on' => 'date-time',
        'started_on' => 'date-time',
        'rang_on' => 'date-time',
        'answered_on' => 'date-time',
        'completed_on' => 'date-time',
        'fees' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'leg_sid' => false,
		'call_sid' => false,
		'from' => false,
		'to' => false,
		'status' => false,
		'call_direction' => false,
		'leg_direction' => false,
		'duration' => true,
		'created_on' => false,
		'started_on' => true,
		'rang_on' => true,
		'answered_on' => true,
		'completed_on' => true,
		'fees' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'leg_sid' => 'legSid',
        'call_sid' => 'callSid',
        'from' => 'from',
        'to' => 'to',
        'status' => 'status',
        'call_direction' => 'callDirection',
        'leg_direction' => 'legDirection',
        'duration' => 'duration',
        'created_on' => 'createdOn',
        'started_on' => 'startedOn',
        'rang_on' => 'rangOn',
        'answered_on' => 'answeredOn',
        'completed_on' => 'completedOn',
        'fees' => 'fees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'leg_sid' => 'setLegSid',
        'call_sid' => 'setCallSid',
        'from' => 'setFrom',
        'to' => 'setTo',
        'status' => 'setStatus',
        'call_direction' => 'setCallDirection',
        'leg_direction' => 'setLegDirection',
        'duration' => 'setDuration',
        'created_on' => 'setCreatedOn',
        'started_on' => 'setStartedOn',
        'rang_on' => 'setRangOn',
        'answered_on' => 'setAnsweredOn',
        'completed_on' => 'setCompletedOn',
        'fees' => 'setFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'leg_sid' => 'getLegSid',
        'call_sid' => 'getCallSid',
        'from' => 'getFrom',
        'to' => 'getTo',
        'status' => 'getStatus',
        'call_direction' => 'getCallDirection',
        'leg_direction' => 'getLegDirection',
        'duration' => 'getDuration',
        'created_on' => 'getCreatedOn',
        'started_on' => 'getStartedOn',
        'rang_on' => 'getRangOn',
        'answered_on' => 'getAnsweredOn',
        'completed_on' => 'getCompletedOn',
        'fees' => 'getFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('leg_sid', $data ?? [], null);
        $this->setIfExists('call_sid', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('call_direction', $data ?? [], null);
        $this->setIfExists('leg_direction', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('started_on', $data ?? [], null);
        $this->setIfExists('rang_on', $data ?? [], null);
        $this->setIfExists('answered_on', $data ?? [], null);
        $this->setIfExists('completed_on', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['leg_sid']) && (mb_strlen($this->container['leg_sid']) > 128)) {
            $invalidProperties[] = "invalid value for 'leg_sid', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['call_sid']) && (mb_strlen($this->container['call_sid']) > 128)) {
            $invalidProperties[] = "invalid value for 'call_sid', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets leg_sid
     *
     * @return string|null
     */
    public function getLegSid()
    {
        return $this->container['leg_sid'];
    }

    /**
     * Sets leg_sid
     *
     * @param string|null $leg_sid Leg sid.
     *
     * @return self
     */
    public function setLegSid($leg_sid)
    {
        if (is_null($leg_sid)) {
            throw new \InvalidArgumentException('non-nullable leg_sid cannot be null');
        }
        if ((mb_strlen($leg_sid) > 128)) {
            throw new \InvalidArgumentException('invalid length for $leg_sid when calling CallLegModel., must be smaller than or equal to 128.');
        }

        $this->container['leg_sid'] = $leg_sid;

        return $this;
    }

    /**
     * Gets call_sid
     *
     * @return string|null
     */
    public function getCallSid()
    {
        return $this->container['call_sid'];
    }

    /**
     * Sets call_sid
     *
     * @param string|null $call_sid Call sid. This value is shared for all legs belonging to the same call.
     *
     * @return self
     */
    public function setCallSid($call_sid)
    {
        if (is_null($call_sid)) {
            throw new \InvalidArgumentException('non-nullable call_sid cannot be null');
        }
        if ((mb_strlen($call_sid) > 128)) {
            throw new \InvalidArgumentException('invalid length for $call_sid when calling CallLegModel., must be smaller than or equal to 128.');
        }

        $this->container['call_sid'] = $call_sid;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from Originating phone number.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Terminating phone number.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\CallStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\CallStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets call_direction
     *
     * @return \OpenAPI\Client\Model\CallDirection|null
     */
    public function getCallDirection()
    {
        return $this->container['call_direction'];
    }

    /**
     * Sets call_direction
     *
     * @param \OpenAPI\Client\Model\CallDirection|null $call_direction call_direction
     *
     * @return self
     */
    public function setCallDirection($call_direction)
    {
        if (is_null($call_direction)) {
            throw new \InvalidArgumentException('non-nullable call_direction cannot be null');
        }
        $this->container['call_direction'] = $call_direction;

        return $this;
    }

    /**
     * Gets leg_direction
     *
     * @return \OpenAPI\Client\Model\CallDirection|null
     */
    public function getLegDirection()
    {
        return $this->container['leg_direction'];
    }

    /**
     * Sets leg_direction
     *
     * @param \OpenAPI\Client\Model\CallDirection|null $leg_direction leg_direction
     *
     * @return self
     */
    public function setLegDirection($leg_direction)
    {
        if (is_null($leg_direction)) {
            throw new \InvalidArgumentException('non-nullable leg_direction cannot be null');
        }
        $this->container['leg_direction'] = $leg_direction;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration Leg duration. This value is provided only if Status is Completed.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            array_push($this->openAPINullablesSetToNull, 'duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on Creation timestamp.
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets started_on
     *
     * @return \DateTime|null
     */
    public function getStartedOn()
    {
        return $this->container['started_on'];
    }

    /**
     * Sets started_on
     *
     * @param \DateTime|null $started_on Started event timestamp.
     *
     * @return self
     */
    public function setStartedOn($started_on)
    {
        if (is_null($started_on)) {
            array_push($this->openAPINullablesSetToNull, 'started_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('started_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['started_on'] = $started_on;

        return $this;
    }

    /**
     * Gets rang_on
     *
     * @return \DateTime|null
     */
    public function getRangOn()
    {
        return $this->container['rang_on'];
    }

    /**
     * Sets rang_on
     *
     * @param \DateTime|null $rang_on Ringing event timestamp.
     *
     * @return self
     */
    public function setRangOn($rang_on)
    {
        if (is_null($rang_on)) {
            array_push($this->openAPINullablesSetToNull, 'rang_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rang_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rang_on'] = $rang_on;

        return $this;
    }

    /**
     * Gets answered_on
     *
     * @return \DateTime|null
     */
    public function getAnsweredOn()
    {
        return $this->container['answered_on'];
    }

    /**
     * Sets answered_on
     *
     * @param \DateTime|null $answered_on Answered event timestamp.
     *
     * @return self
     */
    public function setAnsweredOn($answered_on)
    {
        if (is_null($answered_on)) {
            array_push($this->openAPINullablesSetToNull, 'answered_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('answered_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['answered_on'] = $answered_on;

        return $this;
    }

    /**
     * Gets completed_on
     *
     * @return \DateTime|null
     */
    public function getCompletedOn()
    {
        return $this->container['completed_on'];
    }

    /**
     * Sets completed_on
     *
     * @param \DateTime|null $completed_on Completed event timestamp.
     *
     * @return self
     */
    public function setCompletedOn($completed_on)
    {
        if (is_null($completed_on)) {
            array_push($this->openAPINullablesSetToNull, 'completed_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_on'] = $completed_on;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\FeeGroupModel[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\FeeGroupModel[]|null $fees Fees for this leg.
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            array_push($this->openAPINullablesSetToNull, 'fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fees'] = $fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


