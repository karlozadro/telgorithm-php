<?php
/**
 * OutboundMessageModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telgorithm Messaging API
 *
 * In our APIs we use a rate limit. The rate limit is the maximum number of calls you want to allow in a particular time interval. Setting rate limits helps us to provide the best performance of integration between your software and Telgorithm by preventing other clients from affecting you.    Despite the fact that there is no accepted standard for HTTP rate-limiting headers, we were guided by [**IETF draft: RateLimit Fields for HTTP**](https://www.ietf.org/archive/id/draft-ietf-httpapi-ratelimit-headers-05.html).      We use these HTTP headers on APIs endpoints:    ``` RateLimit-Limit: containing the requests quota in the time window; RateLimit-Remaining: containing a non-negative integer which represents the remaining requests quota in the current time window; RateLimit-Reset: amount of seconds when the full quota will be available; ```  Default quotas:  | Endpoint                             | Default            | | ------------------------------------ | ------------------ | | POST `messaging/v1/OutboundMessages` | 100 per 10 seconds       | | POST `messaging/v1/Phones`           | 120 per hour        | | All REST GET endpoints               | 100 per 10 seconds | | REST non-GET endpoints               | 100 per 10 seconds  |  When quota is exceeded, server do not serve the request replying instead with a 429 HTTP status code.    If you need a bigger quota [contact us](mailto:support@telgorithm.com).
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OutboundMessageModel Class Doc Comment
 *
 * @category Class
 * @description Outbound Message.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutboundMessageModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OutboundMessageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sid' => 'string',
        'from' => 'string',
        'to' => 'string',
        'created_on' => '\DateTime',
        'text' => 'string',
        'carrier' => 'string',
        'status' => '\OpenAPI\Client\Model\OutboundMessageStatus',
        'error_code' => 'int',
        'error_description' => 'string',
        'callback_url_override' => 'string',
        'segment_count' => 'int',
        'media_urls' => 'string[]',
        'expires_on' => '\DateTime',
        'fees' => '\OpenAPI\Client\Model\InboundMessageModelFees'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sid' => null,
        'from' => null,
        'to' => null,
        'created_on' => 'date-time',
        'text' => null,
        'carrier' => null,
        'status' => null,
        'error_code' => 'int32',
        'error_description' => null,
        'callback_url_override' => null,
        'segment_count' => 'int32',
        'media_urls' => null,
        'expires_on' => 'date-time',
        'fees' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sid' => false,
		'from' => false,
		'to' => false,
		'created_on' => false,
		'text' => false,
		'carrier' => true,
		'status' => false,
		'error_code' => false,
		'error_description' => true,
		'callback_url_override' => true,
		'segment_count' => false,
		'media_urls' => true,
		'expires_on' => true,
		'fees' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sid' => 'sid',
        'from' => 'from',
        'to' => 'to',
        'created_on' => 'createdOn',
        'text' => 'text',
        'carrier' => 'carrier',
        'status' => 'status',
        'error_code' => 'errorCode',
        'error_description' => 'errorDescription',
        'callback_url_override' => 'callbackUrlOverride',
        'segment_count' => 'segmentCount',
        'media_urls' => 'mediaUrls',
        'expires_on' => 'expiresOn',
        'fees' => 'fees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sid' => 'setSid',
        'from' => 'setFrom',
        'to' => 'setTo',
        'created_on' => 'setCreatedOn',
        'text' => 'setText',
        'carrier' => 'setCarrier',
        'status' => 'setStatus',
        'error_code' => 'setErrorCode',
        'error_description' => 'setErrorDescription',
        'callback_url_override' => 'setCallbackUrlOverride',
        'segment_count' => 'setSegmentCount',
        'media_urls' => 'setMediaUrls',
        'expires_on' => 'setExpiresOn',
        'fees' => 'setFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sid' => 'getSid',
        'from' => 'getFrom',
        'to' => 'getTo',
        'created_on' => 'getCreatedOn',
        'text' => 'getText',
        'carrier' => 'getCarrier',
        'status' => 'getStatus',
        'error_code' => 'getErrorCode',
        'error_description' => 'getErrorDescription',
        'callback_url_override' => 'getCallbackUrlOverride',
        'segment_count' => 'getSegmentCount',
        'media_urls' => 'getMediaUrls',
        'expires_on' => 'getExpiresOn',
        'fees' => 'getFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sid', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('error_description', $data ?? [], null);
        $this->setIfExists('callback_url_override', $data ?? [], null);
        $this->setIfExists('segment_count', $data ?? [], null);
        $this->setIfExists('media_urls', $data ?? [], null);
        $this->setIfExists('expires_on', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sid'] === null) {
            $invalidProperties[] = "'sid' can't be null";
        }
        if ((mb_strlen($this->container['sid']) > 128)) {
            $invalidProperties[] = "invalid value for 'sid', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['sid']) < 1)) {
            $invalidProperties[] = "invalid value for 'sid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ((mb_strlen($this->container['from']) < 1)) {
            $invalidProperties[] = "invalid value for 'from', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ((mb_strlen($this->container['to']) < 1)) {
            $invalidProperties[] = "invalid value for 'to', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ((mb_strlen($this->container['text']) < 1)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sid
     *
     * @return string
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string $sid Outbound Message Sid.
     *
     * @return self
     */
    public function setSid($sid)
    {
        if (is_null($sid)) {
            throw new \InvalidArgumentException('non-nullable sid cannot be null');
        }
        if ((mb_strlen($sid) > 128)) {
            throw new \InvalidArgumentException('invalid length for $sid when calling OutboundMessageModel., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($sid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sid when calling OutboundMessageModel., must be bigger than or equal to 1.');
        }

        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from Sender phone number.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }

        if ((mb_strlen($from) < 1)) {
            throw new \InvalidArgumentException('invalid length for $from when calling OutboundMessageModel., must be bigger than or equal to 1.');
        }

        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Recipient phone number.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }

        if ((mb_strlen($to) < 1)) {
            throw new \InvalidArgumentException('invalid length for $to when calling OutboundMessageModel., must be bigger than or equal to 1.');
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on Created date.
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Message text.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }

        if ((mb_strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $text when calling OutboundMessageModel., must be bigger than or equal to 1.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Carrier name of `to` number.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            array_push($this->openAPINullablesSetToNull, 'carrier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OutboundMessageStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OutboundMessageStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int $error_code If specified, denotes the error occurred when sending a message.<p>Possible values:</p> <ul> <li><b>0</b>: No error</li> <li><b>1</b>: Sender phone number is invalid</li> <li><b>2</b>: Sender phone number doesn't belong your company</li> <li><b>3</b>: Sender phone number doesn't belong any TCR campaign</li> <li><b>4</b>: Sender phone number is not active yet</li> <li><b>5</b>: Sender phone number is in process of changing TCR Campaign</li> <li><b>6</b>: Not all MNO's were selected on currently attached TCR campaign, please re-create TCR campaign with all MNO's selected</li> <li><b>1001</b>: Recipient phone number is invalid</li> <li><b>1002</b>: Message cannot be sent to the recipient because recipient has opted out</li> <li><b>1003</b>: Destination number is currently unable to receive text messages (possibly no reception or handset is turned off). Check with end user</li> <li><b>1004</b>: Destination address does not have text messaging services active</li> <li><b>2001</b>: Text cannot be empty</li> <li><b>2002</b>: Text cannot be longer than 8000 characters</li> <li><b>2003</b>: Callback url cannot be longer than 512 characters</li> <li><b>2004</b>: Expiration time which was provided with the request is in the past</li> <li><b>2005</b>: UTC date-time field in the request body was provided in invalid format</li> <li><b>3001</b>: Message exceeds your Campaign Registry MNO approved throughput limits. The limit specified in TCR Campaign is too low to accomodate a single message</li> <li><b>3002</b>: SPAM blocking: volume/velocity policies reached and content filtering</li> <li><b>3003</b>: Equivalent to not authorized. Usually because the number may not have SMS enabled for example</li> <li><b>3004</b>: Temporarily unable to deliver. Retry</li> <li><b>3005</b>: Message queue full</li> <li><b>3006</b>: Message submitting failed</li> <li><b>3007</b>: Priority is wrong</li> <li><b>3008</b>: Destination address does not accept messages from Toll Free Numbers</li> <li><b>3009</b>: Message is too long for receiving provider</li> <li><b>3010</b>: Source phone number may not be configured correctly (also possible there may be an upstream carrier outage)</li> <li><b>3011</b>: Network error between aggregator & MNO, please contact support for further details</li> <li><b>3012</b>: Destination number out of carrier funds for texting at the time (Possibly prepaid user). Check with end user</li> <li><b>3013</b>: Message flagged due to non-compliant URL</li> <li><b>3014</b>: Temp TF failure likely due to maintenance update. Please retry sending again in a bit</li> <li><b>3015</b>: TCR campaign, which the sender number belongs to, is suspended by MNO</li> <li><b>3016</b>: TCR campaign, which the sender number belongs to, is not approved by DCA yet</li> <li><b>3017</b>: TCR campaign, which the sender number belongs to, expired</li> <li><b>3018</b>: TCR campaign, which the sender number belongs to, is in erroneous state. Please contact support if the problem persists</li> <li><b>3019</b>: Your Telgorithm account has insufficient funds. It has been suspended</li> <li><b>3020</b>: You've reached a throughput allowance likely because of unregistered traffics, please resend or await full Campaign Approval</li> <li><b>2147483647</b>: Unknown error</li> </ul>
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_description
     *
     * @return string|null
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * Sets error_description
     *
     * @param string|null $error_description Additional textual description of the error.
     *
     * @return self
     */
    public function setErrorDescription($error_description)
    {
        if (is_null($error_description)) {
            array_push($this->openAPINullablesSetToNull, 'error_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * Gets callback_url_override
     *
     * @return string|null
     */
    public function getCallbackUrlOverride()
    {
        return $this->container['callback_url_override'];
    }

    /**
     * Sets callback_url_override
     *
     * @param string|null $callback_url_override If specified - used for sending outbound messages events to this url.  If this url is empty then MessagingConfig urls are used for outbound messages events.  In case of failure we will send the same request to the `MessagingConfig.OutboundBackupCallbackUrl` url.
     *
     * @return self
     */
    public function setCallbackUrlOverride($callback_url_override)
    {
        if (is_null($callback_url_override)) {
            array_push($this->openAPINullablesSetToNull, 'callback_url_override');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callback_url_override', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callback_url_override'] = $callback_url_override;

        return $this;
    }

    /**
     * Gets segment_count
     *
     * @return int|null
     */
    public function getSegmentCount()
    {
        return $this->container['segment_count'];
    }

    /**
     * Sets segment_count
     *
     * @param int|null $segment_count Message segment count.
     *
     * @return self
     */
    public function setSegmentCount($segment_count)
    {
        if (is_null($segment_count)) {
            throw new \InvalidArgumentException('non-nullable segment_count cannot be null');
        }
        $this->container['segment_count'] = $segment_count;

        return $this;
    }

    /**
     * Gets media_urls
     *
     * @return string[]|null
     */
    public function getMediaUrls()
    {
        return $this->container['media_urls'];
    }

    /**
     * Sets media_urls
     *
     * @param string[]|null $media_urls Media urls of the message. If null or empty - SMS, if any - MMS.
     *
     * @return self
     */
    public function setMediaUrls($media_urls)
    {
        if (is_null($media_urls)) {
            array_push($this->openAPINullablesSetToNull, 'media_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media_urls'] = $media_urls;

        return $this;
    }

    /**
     * Gets expires_on
     *
     * @return \DateTime|null
     */
    public function getExpiresOn()
    {
        return $this->container['expires_on'];
    }

    /**
     * Sets expires_on
     *
     * @param \DateTime|null $expires_on UTC timestamp when the message will expire (or expired).
     *
     * @return self
     */
    public function setExpiresOn($expires_on)
    {
        if (is_null($expires_on)) {
            array_push($this->openAPINullablesSetToNull, 'expires_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expires_on'] = $expires_on;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\InboundMessageModelFees|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\InboundMessageModelFees|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            array_push($this->openAPINullablesSetToNull, 'fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fees'] = $fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


